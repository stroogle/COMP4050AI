import OpenAI from 'openai';

export class RubricGenerator {
    private openai: OpenAI;

    constructor(apiKey: string) {
        this.openai = new OpenAI({ apiKey });
    }

    /**
     * This function sends the content to OpenAI and asks it to generate a rubric with criteria and grade descriptors.
     * @param content - The content from which the rubric is generated.
     * @returns A JSON object representing the rubric.
     */
    async generateRubricFromContent(content: string): Promise<any> {
        const prompt = `
            Please analyze the following content and generate a marking rubric.
            The rubric should include the following:
            - Criteria for evaluation (e.g., Clarity, Completeness, Accuracy)
            - Grade descriptors for each criterion (e.g., Fail, Pass, Credit, Distinction, High Distinction).
            
            Content to analyze:
            ${content}
        `;

        try {
            const response = await this.openai.chat.completions.create({
                model: "gpt-4o-2024-08-06",
                messages: [{ role: 'user', content: prompt }],
            });

            const generatedRubric = response.choices[0].message?.content || null;

            if (!generatedRubric) {
                throw new Error('Failed to generate rubric.');
            }

            // You may want to format the response into a structured JSON object
            return this.parseRubric(generatedRubric);
        } catch (error) {
            console.error('Error generating rubric:', error);
            throw new Error('Failed to generate rubric.');
        }
    }

    /**
     * Parses the generated rubric into a structured format.
     * @param rubricText - The rubric text generated by OpenAI.
     * @returns A JSON object representing the rubric.
     */
    private parseRubric(rubricText: string): any {
        // This is a simplified parser, you can adjust this to match the format you expect from OpenAI.
        const lines = rubricText.split('\n').filter(line => line.trim() !== '');
        const rubric = {
            title: 'Generated Marking Rubric',
            criteria: [] as any[]
        };

        let currentCriterion: any = null;

        lines.forEach(line => {
            if (line.startsWith('Criterion:')) {
                if (currentCriterion) {
                    rubric.criteria.push(currentCriterion);
                }
                currentCriterion = { name: line.replace('Criterion:', '').trim(), descriptors: {} };
            } else if (line.startsWith('Fail:')) {
                currentCriterion.descriptors.F = line.replace('Fail:', '').trim();
            } else if (line.startsWith('Pass:')) {
                currentCriterion.descriptors.P = line.replace('Pass:', '').trim();
            } else if (line.startsWith('Credit:')) {
                currentCriterion.descriptors.C = line.replace('Credit:', '').trim();
            } else if (line.startsWith('Distinction:')) {
                currentCriterion.descriptors.D = line.replace('Distinction:', '').trim();
            } else if (line.startsWith('High Distinction:')) {
                currentCriterion.descriptors.HD = line.replace('High Distinction:', '').trim();
            }
        });

        if (currentCriterion) {
            rubric.criteria.push(currentCriterion);
        }

        return rubric;
    }
}
